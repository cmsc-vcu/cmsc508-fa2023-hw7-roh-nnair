---
title: Homework 7 - Creating a resume database
author: Rohan Nair
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

GITHUB URL: https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-roh-nnair.git

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This assignment is aimed at exploring DDL and DML in MySQL by defining the schema and performing queries
against a database that tracks people's information, the skills they possess, and their roles.

## Crows-foot diagram

Below is a Crow's Foot Diagram representing the schema of the database (all the tables, their columns, and 
how they relate to one another).

```{mermaid}
%%| echo: false
erDiagram
    SKILLS {
        primary_key skills_id
        string name
        string description
        string tag
        string url
        time time_commitment
    }

    PEOPLE {
        primary_key people_id
        string people_first_name
        string people_last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }

    PEOPLESKILLS {
        primary_key people_skills_id
        foreign_key people_id
        foreign_key skills_id
        date date_acquired
    }

    ROLES {
        primary_key role_id
        string name
        int sort_priority
    }

    PEOPLEROLES {
        primary_key peopleroles_id
        foreign_key people_id
        foreign_key role_id
        date date_assigned
    }

    PEOPLE ||--o{ PEOPLESKILLS : has
    SKILLS ||--o{ PEOPLESKILLS : "possessed by"

    PEOPLE ||--o{ PEOPLEROLES : "is a"
    ROLES ||--o{ PEOPLEROLES : "belongs to"
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe a peoples' names, their email, linkedin profile location, headshot location, discord username, the date they joined the company, and a brief description of themselves

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe the name of the skills, descriptions of what they are, categories they fall under, and time to learn it 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

## Add code to list skills table here
sql = f"""
select * from skills;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the name of a role and how high it is in sort priority. 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select * from roles;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select name, tag, description from skills order by name asc
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select concat(people_first_name, " ",people_last_name) as name, email from people order by people_last_name asc;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select name from peopleskills right join skills on peopleskills.skills_id=skills.skill_id where people_id=1;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```
### List people names with Skill 6

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select people_first_name, people_last_name from people 
left join peopleskills on people.people_id=peopleskills.people_id
left join skills on peopleskills.skills_id=skills.skill_id where skills.tag="Skill 6";
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select people.people_first_name, people.people_last_name from people 
left join peopleroles on people.people_id=peopleroles.people_id
right join roles on peopleroles.role_id=roles.role_id
where roles.name="Developer";
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select people_first_name, people_last_name from people
left join peopleskills on people.people_id=peopleskills.people_id
where peopleskills.peopleskills_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills
```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select name, tag from skills 
left join peopleskills on skills.skill_id=peopleskills.skills_id
where peopleskills.peopleskills_id is NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role
```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select people.people_first_name, people.people_last_name, skills.name from people
inner join peopleskills on people.people_id=peopleskills.people_id
inner join skills on peopleskills.skills_id=skills.skill_id
inner join peopleroles on peopleskills.people_id=peopleroles.people_id
inner join roles on peopleroles.role_id=roles.role_id
where roles.name="Boss";
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles
```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select roles.role_id, roles.name from roles
left join peopleroles on roles.role_id=peopleroles.role_id
where peopleroles.role_id is null;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

I actually really liked this assignment. The ddl file allowed me to exercise my brain on DDL for SQL and apply
what i've learned in class, as well as figuring out how to employ ChatGPT to come up with insertion statements
for all of the relations I defined. It was nice to come back to database design and draw out a crows foot diagram to reinforce
what i've learned before. My favorite part was querying the database. It felt nice to actually apply DML knowledge and get to think
about what tables I need to join together and how I need to join them. This definitely made me feel more confident in my SQL capability.
